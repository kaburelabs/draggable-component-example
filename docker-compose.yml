version: '3'

services:
  dash-app:
  
    container_name: myosh-app-test
    restart: always

    build:
      context: .
      dockerfile: Dockerfile

    environment:

      - CLIENT_ID=""
      - MONGODB_ID_CLIENT=

      - BUCKET_1=assets/data/2014_world_gdp_with_codes.csv
      - BUCKET_2=assets/data/solar.csv

      - AWS_ACCESS_KEY_ID=""
      - AWS_SECRET_ACCESS_KEY=""
      - EMAIL_ADDRESS=""
      - EMAIL_PASSWORD=""

    volumes:
      - .:/app

    ports:
      - "80:8000"

    entrypoint: ["gunicorn", "-b", "0.0.0.0:8000", "app:server"]


# DOCKER TERMINOLOGY:

# Image: 
# Is a blueprint for what you want to build. Ex: Ubuntu + TensorFlow with Nvidia Drivers and a running Jupyter Server.

# Container: 
# Is an instantiation of an image that you have brought to life. You can have multiple copies of the same image running. It is really important to grasp the difference between an image and a container as this is a common source of confusion for new comers. If the difference between an image and a container isnâ€™t clear, STOP and read again.

# Dockerfile: 
# Recipe for creating an Image. Dockerfiles contain special Docker syntax. From the official documentation: A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image.

# Commit: 
# Like git, Docker containers offer version control. You can save the state of your docker container at anytime as a new image by committing the changes.

# DockerHub / Image Registry: 
# Place where people can post public (or private) docker images to facilitate collaboration and sharing.

# Layer: 
# modification to an existing image, represented by an instruction in the Dockerfile. Layers are applied in sequence to the base image to create the final image.
